==========　stash ==========


# Working directoryとSatging areaの内容を一時的に別の場所へ移動


# stashへ移動させた内容は、stashから取り出す際、Working directoryに戻ってくる


　Working directory　→  stash　→　Working directory


　Staging area　→  stash  →  Working directory


# stashから戻したとしても、stash内には作業内容が残ることに注意



========== 基本操作 ==========


# stashする


　$ git stash


　　・trackされているファイルのみstashされる


# stashした内容を一覧表示


　$ git stash list


# stashした内容をWorking directoryへ戻す


　$ git stash apply


　　・Staging areaの内容をStaging areaへ戻す際は--indexを使用

# 特定のstashだけapply


　$ git stash apply stash@{<n>}


# 作業内容をstashから削除


　$ git stash drop


# 特定のstashだけdrop


　$ git stash drop stash@{<n>}



========== stashする ==========


$ subl <filename1>　（ファイルの編集）

↓

--- 緊急の作業が入ったとする ---

↓

$ git stash　（Working directoryの内容をstash）

↓

$ git stash list　（stashの一覧表示）

↓

$ subl <filename2>　（緊急作業のファイルを編集）

↓

$ git add <filename2>　（Working directory　→  Staging area)

↓

$ git commit -m "<commit message>"　（Staging area　→  リポジトリ）

↓

$ git stash apply　（stashした内容をWorking directoryへ戻す

↓

$ git stash drop　（stashの内容を削除）



========== stashでのコンフリクト ==========


$ subl <filename1>　（ファイル１を編集）

↓

$ git stash　（Working directoryの内容をstash)

↓

$ subl <filename1>　（stashしたファイルと同じファイルを編集)

↓

$ git stash apply　（先ほどstashした内容をWorking directoryへ戻す）　→ エラー発生

　　・Working directoryにstashしたものと同じファイルがあるためエラーが発生する

↓

$ git add <filename1>　（Working directory　→  Staging area)

↓

$ git stash apply　（先ほどstashした内容をWorking directoryへ戻す）　→ コンフリクト発生

↓

$ git mergetool　（コンフリクトに対応）

↓

$ rm <filename1>.orig　（コンフリクトに対応して作成されたファイルを削除）

↓

$ git commit -m "<commit message>" （コンフリクトに対応した結果をコミット）

↓

$ git stash drop　（stashの内容を削除）



========== untrackファイルの作業内容をstash　==========


# untrackファイルの作業内容もstash


　$ git stash -u


　　・$ git stashのみの場合、track済みのファイルのみstash


　　・-uを付けることで、trackファイルとuntrackファイルの両方をstash


# 特定のstashの内容を確認


　$ git stash show stash@{<n>}


　　・stash@{0}, stash@{1}のようにして、特定のstashへのリファレンスを得る


　　・untrackファイルの作業内容は表示されない


# 同時にapply & drop


　$ git stash pop


　　・一番上にあるstashをpop



==========　gitignoreされているファイルの作業内容をstash ==========


# gitignoreしているファイルの作業内容も含めてstash


　$ git stash -a


　　・$ git stash, git stash -uではgitignoreされているファイルの作業内容はstashの対象外


# gitignoreしているファイルの作業内容をstashする


　$ subl .gitignore　（gitignoreファイルに<filename1>を追加）

　↓

　$ git add .gitignore （Working directory　→  Staging area)

　↓

　$ git commit -m "<commit message>"　（Staging area　→　リポジトリ）

　↓

　$ touch <filename1>　（先ほど.gitignoreに追加したファイルを新規作成）

　↓

　$ git stash　（<filename1>の新規作成の作業内容はstashされない）

　↓

　$ git stash -a　（<filename1>の新規作成の作業内容がstashされる）

　↓

　$ git stash pop　（最新のstash内容をpop)



========== メッセージを添えてstash　==========


# メッセージを添えてstash


　$ git stash save "<message>"


　　・stashに複数の作業内容ができる場合は、メッセージを付けると良い


# メッセージを添えながら複数の作業内容をstash


　$ subl <filename1>　（１度目の変更）

　↓

　$ git stash save "<message>"　（１度目のstash)

　↓

　$ subl <filename1>　（２度目の変更）　→  １度目の変更の作業前の状態になっている

　↓

　$ git stash save "<message>"　（２度目のstash)

　↓

